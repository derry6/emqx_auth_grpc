%%-*- mode: erlang -*-
%% emqx_auth_http config mapping

%% ================ Default Configs ================
{mapping, "auth.grpc.host", "emqx_auth_grpc.host", [{datatype, string}]}.
{mapping, "auth.grpc.port", "emqx_auth_grpc.port", [{datatype, integer}]}.
{mapping, "auth.grpc.ssl.cacertfile", "emqx_auth_grpc.ssl_opts", [{datatype, string}]}.
{mapping, "auth.grpc.ssl.certfile", "emqx_auth_grpc.ssl_opts", [{datatype, string}]}.
{mapping, "auth.grpc.ssl.keyfile", "emqx_auth_grpc.ssl_opts", [{datatype, string}]}.
{mapping, "auth.grpc.ssl.verify", "emqx_auth_grpc.ssl_opts", [{datatype, atom}]}.

{translation, "emqx_auth_grpc.ssl_opts", fun(Conf) ->
    Filter = fun(L) -> [{K, V} || {K, V} <- L, V =/= undefined] end,
    SslOpts = Filter([
        {cacertfile, cuttlefish:conf_get("auth.grpc.ssl.cacertfile", Conf, undefined)},
        {certfile, cuttlefish:conf_get("auth.grpc.ssl.certfile", Conf, undefined)},
        {keyfile, cuttlefish:conf_get("auth.grpc.ssl.keyfile", Conf, undefined)},
        {verify, cuttlefish:conf_get("auth.grpc.ssl.verify", Conf, undefined)}
    ]),
    SslOpts
end}.

%% Connection Options
{mapping, "auth.grpc.request.connect_timeout", "emqx_auth_grpc.req_opts", [{default, 60000},{datatype, [integer, {duration, ms}]}]}.
{mapping, "auth.grpc.request.timeout", "emqx_auth_grpc.req_opts", [{default, 0}, {datatype, [integer, {duration, ms}]}]}.
{mapping, "auth.grpc.request.retry_times", "emqx_auth_grpc.req_opts", [{default, 3}, {datatype, integer}]}.
{mapping, "auth.grpc.request.retry_interval", "emqx_auth_grpc.req_opts", [{default, "200ms"}, {datatype, {duration, ms}}]}.
{mapping, "auth.grpc.request.retry_backoff", "emqx_auth_grpc.req_opts", [{default, 2.0}, {datatype, float}]}.

{translation, "emqx_auth_grpc.req_opts", fun(Conf) ->
    ReqOpts = [
        {connect_timeout, cuttlefish:conf_get("auth.grpc.request.connect_timeout", Conf)},
        {timeout, cuttlefish:conf_get("auth.grpc.request.timeout", Conf)},
        {retry_times, cuttlefish:conf_get("auth.grpc.request.retry_times", Conf)},
        {retry_interval, cuttlefish:conf_get("auth.grpc.request.retry_interval", Conf)},
        {retry_backoff, cuttlefish:conf_get("auth.grpc.request.retry_backoff", Conf)}
    ],
    ReqOpts
end}.


%% ACL
{mapping, "auth.grpc.acl.host", "emqx_auth_grpc.acl_host", [{datatype, string}]}.
{mapping, "auth.grpc.acl.port", "emqx_auth_grpc.acl_port", [{datatype, integer}]}.
{mapping, "auth.grpc.acl.ssl.cacertfile", "emqx_auth_grpc.acl_ssl_opts", [{datatype, string}]}.
{mapping, "auth.grpc.acl.ssl.certfile", "emqx_auth_grpc.acl_ssl_opts", [{datatype, string}]}.
{mapping, "auth.grpc.acl.ssl.keyfile", "emqx_auth_grpc.acl_ssl_opts", [{datatype, string}]}.
{mapping, "auth.grpc.acl.ssl.verify", "emqx_auth_grpc.acl_ssl_opts", [{datatype, atom}]}.

{translation, "emqx_auth_grpc.acl_ssl_opts", fun(Conf) ->
    Filter = fun(L) -> [{K, V} || {K, V} <- L, V =/= undefined] end,
    SslOpts = Filter([
        {cacertfile, cuttlefish:conf_get("auth.grpc.acl.ssl.cacertfile", Conf, undefined)},
        {certfile, cuttlefish:conf_get("auth.grpc.acl.ssl.certfile", Conf, undefined)},
        {keyfile, cuttlefish:conf_get("auth.grpc.acl.ssl.keyfile", Conf, undefined)},
        {verify, cuttlefish:conf_get("auth.grpc.acl.ssl.verify", Conf, undefined)}
    ]),
    SslOpts
end}.

%% Superuser Server
{mapping, "auth.grpc.superuser.host", "emqx_auth_grpc.superuser_host", [{datatype, string}]}.
{mapping, "auth.grpc.superuser.port", "emqx_auth_grpc.superuser_port", [{datatype, integer}]}.
{mapping, "auth.grpc.superuser.ssl.cacertfile", "emqx_auth_grpc.superuser_ssl_opts", [{datatype, string}]}.
{mapping, "auth.grpc.superuser.ssl.certfile", "emqx_auth_grpc.superuser_ssl_opts", [{datatype, string}]}.
{mapping, "auth.grpc.superuser.ssl.keyfile", "emqx_auth_grpc.superuser_ssl_opts", [{datatype, string}]}.
{mapping, "auth.grpc.superuser.ssl.verify", "emqx_auth_grpc.superuser_ssl_opts", [{datatype, atom}]}.

{translation, "emqx_auth_grpc.superuser_ssl_opts", fun(Conf) ->
    Filter = fun(L) -> [{K, V} || {K, V} <- L, V =/= undefined] end,
    SslOpts = Filter([
        {cacertfile, cuttlefish:conf_get("auth.grpc.superuser.ssl.cacertfile", Conf, undefined)},
        {certfile, cuttlefish:conf_get("auth.grpc.superuser.ssl.certfile", Conf, undefined)},
        {keyfile, cuttlefish:conf_get("auth.grpc.superuser.ssl.keyfile", Conf, undefined)},
        {verify, cuttlefish:conf_get("auth.grpc.superuser.ssl.verify", Conf, undefined)}
    ]),
    SslOpts
end}.

%% Common headers
{mapping, "auth.grpc.header.$field", "emqx_auth_grpc.headers", [{datatype, string}]}.
{translation, "emqx_auth_grpc.headers", fun(Conf) ->
    lists:map(
        fun({["auth", "grpc", "header", Field], Value}) ->
            {Field, Value}
        end,
    cuttlefish_variable:filter_by_prefix("auth.grpc.header", Conf))
end}.
