%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.3
-module(auth_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type auth_request() ::
      #{client_id               => iodata(),        % = 1
        username                => iodata(),        % = 2
        password                => iodata(),        % = 3
        protocol                => iodata(),        % = 4
        peerhost                => iodata(),        % = 5
        sockport                => integer(),       % = 6, 32 bits
        peercert                => iodata(),        % = 7
        is_bridge               => boolean() | 0 | 1, % = 8
        is_superuser            => boolean() | 0 | 1, % = 9
        mountpoint              => iodata(),        % = 10
        zone                    => iodata(),        % = 11
        tls_common_name         => iodata(),        % = 12
        tls_subject             => iodata(),        % = 13
        topic                   => iodata(),        % = 14
        access                  => iodata()         % = 15
       }.

-type auth_response() ::
      #{code                    => integer(),       % = 1, 32 bits
        msg                     => iodata(),        % = 2
        is_superuser            => boolean() | 0 | 1, % = 3
        anonymous               => boolean() | 0 | 1, % = 4
        mountpoint              => iodata()         % = 6
       }.

-export_type(['auth_request'/0, 'auth_response'/0]).

-spec encode_msg(auth_request() | auth_response(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(auth_request() | auth_response(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      auth_request ->
	  encode_msg_auth_request(id(Msg, TrUserData),
				  TrUserData);
      auth_response ->
	  encode_msg_auth_response(id(Msg, TrUserData),
				   TrUserData)
    end.


encode_msg_auth_request(Msg, TrUserData) ->
    encode_msg_auth_request(Msg, <<>>, TrUserData).


encode_msg_auth_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{client_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{username := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{password := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case is_empty_string(TrF3) of
		   true -> B2;
		   false ->
		       e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{protocol := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 case is_empty_string(TrF4) of
		   true -> B3;
		   false ->
		       e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{peerhost := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 case is_empty_string(TrF5) of
		   true -> B4;
		   false ->
		       e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{sockport := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= 0 -> B5;
		    true ->
			e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{peercert := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 case is_empty_string(TrF7) of
		   true -> B6;
		   false ->
		       e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    B8 = case M of
	   #{is_bridge := F8} ->
	       begin
		 TrF8 = id(F8, TrUserData),
		 if TrF8 =:= false -> B7;
		    true -> e_type_bool(TrF8, <<B7/binary, 64>>, TrUserData)
		 end
	       end;
	   _ -> B7
	 end,
    B9 = case M of
	   #{is_superuser := F9} ->
	       begin
		 TrF9 = id(F9, TrUserData),
		 if TrF9 =:= false -> B8;
		    true -> e_type_bool(TrF9, <<B8/binary, 72>>, TrUserData)
		 end
	       end;
	   _ -> B8
	 end,
    B10 = case M of
	    #{mountpoint := F10} ->
		begin
		  TrF10 = id(F10, TrUserData),
		  case is_empty_string(TrF10) of
		    true -> B9;
		    false ->
			e_type_string(TrF10, <<B9/binary, 82>>, TrUserData)
		  end
		end;
	    _ -> B9
	  end,
    B11 = case M of
	    #{zone := F11} ->
		begin
		  TrF11 = id(F11, TrUserData),
		  case is_empty_string(TrF11) of
		    true -> B10;
		    false ->
			e_type_string(TrF11, <<B10/binary, 90>>, TrUserData)
		  end
		end;
	    _ -> B10
	  end,
    B12 = case M of
	    #{tls_common_name := F12} ->
		begin
		  TrF12 = id(F12, TrUserData),
		  case is_empty_string(TrF12) of
		    true -> B11;
		    false ->
			e_type_string(TrF12, <<B11/binary, 98>>, TrUserData)
		  end
		end;
	    _ -> B11
	  end,
    B13 = case M of
	    #{tls_subject := F13} ->
		begin
		  TrF13 = id(F13, TrUserData),
		  case is_empty_string(TrF13) of
		    true -> B12;
		    false ->
			e_type_string(TrF13, <<B12/binary, 106>>, TrUserData)
		  end
		end;
	    _ -> B12
	  end,
    B14 = case M of
	    #{topic := F14} ->
		begin
		  TrF14 = id(F14, TrUserData),
		  case is_empty_string(TrF14) of
		    true -> B13;
		    false ->
			e_type_string(TrF14, <<B13/binary, 114>>, TrUserData)
		  end
		end;
	    _ -> B13
	  end,
    case M of
      #{access := F15} ->
	  begin
	    TrF15 = id(F15, TrUserData),
	    case is_empty_string(TrF15) of
	      true -> B14;
	      false ->
		  e_type_string(TrF15, <<B14/binary, 122>>, TrUserData)
	    end
	  end;
      _ -> B14
    end.

encode_msg_auth_response(Msg, TrUserData) ->
    encode_msg_auth_response(Msg, <<>>, TrUserData).


encode_msg_auth_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{code := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{msg := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{is_superuser := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= false -> B2;
		    true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{anonymous := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= false -> B3;
		    true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    case M of
      #{mountpoint := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    case is_empty_string(TrF5) of
	      true -> B4;
	      false ->
		  e_type_string(TrF5, <<B4/binary, 50>>, TrUserData)
	    end
	  end;
      _ -> B4
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(auth_request, Bin, TrUserData) ->
    id(decode_msg_auth_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(auth_response, Bin, TrUserData) ->
    id(decode_msg_auth_response(Bin, TrUserData),
       TrUserData).



decode_msg_auth_request(Bin, TrUserData) ->
    dfp_read_field_def_auth_request(Bin, 0, 0,
				    id(<<>>, TrUserData), id(<<>>, TrUserData),
				    id(<<>>, TrUserData), id(<<>>, TrUserData),
				    id(<<>>, TrUserData), id(0, TrUserData),
				    id(<<>>, TrUserData), id(false, TrUserData),
				    id(false, TrUserData), id(<<>>, TrUserData),
				    id(<<>>, TrUserData), id(<<>>, TrUserData),
				    id(<<>>, TrUserData), id(<<>>, TrUserData),
				    id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_auth_request(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    d_field_auth_request_client_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   TrUserData);
dfp_read_field_def_auth_request(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    d_field_auth_request_username(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				  TrUserData);
dfp_read_field_def_auth_request(<<26, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    d_field_auth_request_password(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				  TrUserData);
dfp_read_field_def_auth_request(<<34, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    d_field_auth_request_protocol(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				  TrUserData);
dfp_read_field_def_auth_request(<<42, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    d_field_auth_request_peerhost(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				  TrUserData);
dfp_read_field_def_auth_request(<<48, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    d_field_auth_request_sockport(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				  TrUserData);
dfp_read_field_def_auth_request(<<58, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    d_field_auth_request_peercert(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				  TrUserData);
dfp_read_field_def_auth_request(<<64, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    d_field_auth_request_is_bridge(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   TrUserData);
dfp_read_field_def_auth_request(<<72, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    d_field_auth_request_is_superuser(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				      F@_15, TrUserData);
dfp_read_field_def_auth_request(<<82, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    d_field_auth_request_mountpoint(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    F@_15, TrUserData);
dfp_read_field_def_auth_request(<<90, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    d_field_auth_request_zone(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_auth_request(<<98, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    d_field_auth_request_tls_common_name(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
					 F@_14, F@_15, TrUserData);
dfp_read_field_def_auth_request(<<106, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				F@_14, F@_15, TrUserData) ->
    d_field_auth_request_tls_subject(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				     F@_15, TrUserData);
dfp_read_field_def_auth_request(<<114, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				F@_14, F@_15, TrUserData) ->
    d_field_auth_request_topic(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_auth_request(<<122, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				F@_14, F@_15, TrUserData) ->
    d_field_auth_request_access(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_auth_request(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, _) ->
    #{client_id => F@_1, username => F@_2, password => F@_3,
      protocol => F@_4, peerhost => F@_5, sockport => F@_6,
      peercert => F@_7, is_bridge => F@_8,
      is_superuser => F@_9, mountpoint => F@_10,
      zone => F@_11, tls_common_name => F@_12,
      tls_subject => F@_13, topic => F@_14, access => F@_15};
dfp_read_field_def_auth_request(Other, Z1, Z2, F@_1,
				F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				TrUserData) ->
    dg_read_field_def_auth_request(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				   F@_15, TrUserData).

dg_read_field_def_auth_request(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_auth_request(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, F@_14, F@_15, TrUserData);
dg_read_field_def_auth_request(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_auth_request_client_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, F@_12, F@_13,
					 F@_14, F@_15, TrUserData);
      18 ->
	  d_field_auth_request_username(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
					F@_15, TrUserData);
      26 ->
	  d_field_auth_request_password(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
					F@_15, TrUserData);
      34 ->
	  d_field_auth_request_protocol(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
					F@_15, TrUserData);
      42 ->
	  d_field_auth_request_peerhost(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
					F@_15, TrUserData);
      48 ->
	  d_field_auth_request_sockport(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
					F@_15, TrUserData);
      58 ->
	  d_field_auth_request_peercert(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
					F@_15, TrUserData);
      64 ->
	  d_field_auth_request_is_bridge(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, F@_12, F@_13,
					 F@_14, F@_15, TrUserData);
      72 ->
	  d_field_auth_request_is_superuser(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, F@_9, F@_10, F@_11, F@_12,
					    F@_13, F@_14, F@_15, TrUserData);
      82 ->
	  d_field_auth_request_mountpoint(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, F@_12, F@_13,
					  F@_14, F@_15, TrUserData);
      90 ->
	  d_field_auth_request_zone(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, F@_15,
				    TrUserData);
      98 ->
	  d_field_auth_request_tls_common_name(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, F@_9, F@_10, F@_11,
					       F@_12, F@_13, F@_14, F@_15,
					       TrUserData);
      106 ->
	  d_field_auth_request_tls_subject(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, F@_10, F@_11, F@_12, F@_13,
					   F@_14, F@_15, TrUserData);
      114 ->
	  d_field_auth_request_topic(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, F@_15,
				     TrUserData);
      122 ->
	  d_field_auth_request_access(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_auth_request(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					 F@_10, F@_11, F@_12, F@_13, F@_14,
					 F@_15, TrUserData);
	    1 ->
		skip_64_auth_request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, F@_14, F@_15, TrUserData);
	    2 ->
		skip_length_delimited_auth_request(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, F@_9, F@_10,
						   F@_11, F@_12, F@_13, F@_14,
						   F@_15, TrUserData);
	    3 ->
		skip_group_auth_request(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
					F@_15, TrUserData);
	    5 ->
		skip_32_auth_request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, F@_14, F@_15, TrUserData)
	  end
    end;
dg_read_field_def_auth_request(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, _) ->
    #{client_id => F@_1, username => F@_2, password => F@_3,
      protocol => F@_4, peerhost => F@_5, sockport => F@_6,
      peercert => F@_7, is_bridge => F@_8,
      is_superuser => F@_9, mountpoint => F@_10,
      zone => F@_11, tls_common_name => F@_12,
      tls_subject => F@_13, topic => F@_14, access => F@_15}.

d_field_auth_request_client_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_client_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, F@_14, F@_15, TrUserData);
d_field_auth_request_client_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    F@_15, TrUserData).

d_field_auth_request_username(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_username(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, F@_14, F@_15, TrUserData);
d_field_auth_request_username(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				    F@_14, F@_15, TrUserData).

d_field_auth_request_password(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_password(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, F@_14, F@_15, TrUserData);
d_field_auth_request_password(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    F@_15, TrUserData).

d_field_auth_request_protocol(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_protocol(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, F@_14, F@_15, TrUserData);
d_field_auth_request_protocol(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    F@_15, TrUserData).

d_field_auth_request_peerhost(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_peerhost(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, F@_14, F@_15, TrUserData);
d_field_auth_request_peerhost(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    F@_15, TrUserData).

d_field_auth_request_sockport(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_sockport(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, F@_14, F@_15, TrUserData);
d_field_auth_request_sockport(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    F@_15, TrUserData).

d_field_auth_request_peercert(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_peercert(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, F@_14, F@_15, TrUserData);
d_field_auth_request_peercert(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    F@_15, TrUserData).

d_field_auth_request_is_bridge(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_is_bridge(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, F@_14, F@_15, TrUserData);
d_field_auth_request_is_bridge(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    F@_15, TrUserData).

d_field_auth_request_is_superuser(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  F@_14, F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_is_superuser(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, F@_12, F@_13, F@_14, F@_15,
				      TrUserData);
d_field_auth_request_is_superuser(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13,
				  F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    NewFValue, F@_10, F@_11, F@_12, F@_13,
				    F@_14, F@_15, TrUserData).

d_field_auth_request_mountpoint(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				F@_14, F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_mountpoint(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    F@_13, F@_14, F@_15, TrUserData);
d_field_auth_request_mountpoint(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14,
				F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    NewFValue, F@_11, F@_12, F@_13, F@_14,
				    F@_15, TrUserData).

d_field_auth_request_zone(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			  TrUserData)
    when N < 57 ->
    d_field_auth_request_zone(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			      TrUserData);
d_field_auth_request_zone(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15,
			  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, NewFValue, F@_12, F@_13, F@_14,
				    F@_15, TrUserData).

d_field_auth_request_tls_common_name(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				     F@_13, F@_14, F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_tls_common_name(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					 F@_11, F@_12, F@_13, F@_14, F@_15,
					 TrUserData);
d_field_auth_request_tls_common_name(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13,
				     F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, NewFValue, F@_13, F@_14,
				    F@_15, TrUserData).

d_field_auth_request_tls_subject(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				 F@_14, F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_tls_subject(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, F@_14, F@_15, TrUserData);
d_field_auth_request_tls_subject(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _,
				 F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, NewFValue, F@_14,
				    F@_15, TrUserData).

d_field_auth_request_topic(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData)
    when N < 57 ->
    d_field_auth_request_topic(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       TrUserData);
d_field_auth_request_topic(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, F@_13, NewFValue,
				    F@_15, TrUserData).

d_field_auth_request_access(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    F@_15, TrUserData)
    when N < 57 ->
    d_field_auth_request_access(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				TrUserData);
d_field_auth_request_access(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _,
			    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, F@_13, F@_14,
				    NewFValue, TrUserData).

skip_varint_auth_request(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			 TrUserData) ->
    skip_varint_auth_request(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, TrUserData);
skip_varint_auth_request(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			 TrUserData) ->
    dfp_read_field_def_auth_request(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    F@_15, TrUserData).

skip_length_delimited_auth_request(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   F@_14, F@_15, TrUserData)
    when N < 57 ->
    skip_length_delimited_auth_request(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, F@_12, F@_13, F@_14, F@_15,
				       TrUserData);
skip_length_delimited_auth_request(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   F@_14, F@_15, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_request(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				    TrUserData).

skip_group_auth_request(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, F@_15, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_request(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				    TrUserData).

skip_32_auth_request(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData) ->
    dfp_read_field_def_auth_request(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    F@_15, TrUserData).

skip_64_auth_request(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData) ->
    dfp_read_field_def_auth_request(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    F@_15, TrUserData).

decode_msg_auth_response(Bin, TrUserData) ->
    dfp_read_field_def_auth_response(Bin, 0, 0,
				     id(0, TrUserData), id(<<>>, TrUserData),
				     id(false, TrUserData),
				     id(false, TrUserData),
				     id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_auth_response(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_auth_response_code(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_auth_response(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_auth_response_msg(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_auth_response(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_auth_response_is_superuser(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_auth_response(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_auth_response_anonymous(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_auth_response(<<50, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_auth_response_mountpoint(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_auth_response(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, _) ->
    #{code => F@_1, msg => F@_2, is_superuser => F@_3,
      anonymous => F@_4, mountpoint => F@_5};
dfp_read_field_def_auth_response(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_auth_response(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_auth_response(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_auth_response(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
dg_read_field_def_auth_response(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_auth_response_code(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      18 ->
	  d_field_auth_response_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      24 ->
	  d_field_auth_response_is_superuser(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      32 ->
	  d_field_auth_response_anonymous(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      50 ->
	  d_field_auth_response_mountpoint(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_auth_response(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_auth_response(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_auth_response(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
	    3 ->
		skip_group_auth_response(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_auth_response(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_auth_response(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, _) ->
    #{code => F@_1, msg => F@_2, is_superuser => F@_3,
      anonymous => F@_4, mountpoint => F@_5}.

d_field_auth_response_code(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_auth_response_code(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_auth_response_code(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_auth_response(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_auth_response_msg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_auth_response_msg(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_auth_response_msg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_response(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_auth_response_is_superuser(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_auth_response_is_superuser(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_auth_response_is_superuser(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_auth_response(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_auth_response_anonymous(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_auth_response_anonymous(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_auth_response_anonymous(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_auth_response(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_auth_response_mountpoint(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_auth_response_mountpoint(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_auth_response_mountpoint(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_response(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_auth_response(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_auth_response(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
skip_varint_auth_response(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_auth_response(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_auth_response(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    skip_length_delimited_auth_response(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
skip_length_delimited_auth_response(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_response(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_auth_response(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_response(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_auth_response(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_auth_response(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_auth_response(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_auth_response(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      auth_request ->
	  merge_msg_auth_request(Prev, New, TrUserData);
      auth_response ->
	  merge_msg_auth_response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_auth_request/3}).
merge_msg_auth_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{client_id := NFclient_id}} ->
	       S1#{client_id => NFclient_id};
	   {#{client_id := PFclient_id}, _} ->
	       S1#{client_id => PFclient_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{username := NFusername}} ->
	       S2#{username => NFusername};
	   {#{username := PFusername}, _} ->
	       S2#{username => PFusername};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{password := NFpassword}} ->
	       S3#{password => NFpassword};
	   {#{password := PFpassword}, _} ->
	       S3#{password => PFpassword};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{protocol := NFprotocol}} ->
	       S4#{protocol => NFprotocol};
	   {#{protocol := PFprotocol}, _} ->
	       S4#{protocol => PFprotocol};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{peerhost := NFpeerhost}} ->
	       S5#{peerhost => NFpeerhost};
	   {#{peerhost := PFpeerhost}, _} ->
	       S5#{peerhost => PFpeerhost};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{sockport := NFsockport}} ->
	       S6#{sockport => NFsockport};
	   {#{sockport := PFsockport}, _} ->
	       S6#{sockport => PFsockport};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_, #{peercert := NFpeercert}} ->
	       S7#{peercert => NFpeercert};
	   {#{peercert := PFpeercert}, _} ->
	       S7#{peercert => PFpeercert};
	   _ -> S7
	 end,
    S9 = case {PMsg, NMsg} of
	   {_, #{is_bridge := NFis_bridge}} ->
	       S8#{is_bridge => NFis_bridge};
	   {#{is_bridge := PFis_bridge}, _} ->
	       S8#{is_bridge => PFis_bridge};
	   _ -> S8
	 end,
    S10 = case {PMsg, NMsg} of
	    {_, #{is_superuser := NFis_superuser}} ->
		S9#{is_superuser => NFis_superuser};
	    {#{is_superuser := PFis_superuser}, _} ->
		S9#{is_superuser => PFis_superuser};
	    _ -> S9
	  end,
    S11 = case {PMsg, NMsg} of
	    {_, #{mountpoint := NFmountpoint}} ->
		S10#{mountpoint => NFmountpoint};
	    {#{mountpoint := PFmountpoint}, _} ->
		S10#{mountpoint => PFmountpoint};
	    _ -> S10
	  end,
    S12 = case {PMsg, NMsg} of
	    {_, #{zone := NFzone}} -> S11#{zone => NFzone};
	    {#{zone := PFzone}, _} -> S11#{zone => PFzone};
	    _ -> S11
	  end,
    S13 = case {PMsg, NMsg} of
	    {_, #{tls_common_name := NFtls_common_name}} ->
		S12#{tls_common_name => NFtls_common_name};
	    {#{tls_common_name := PFtls_common_name}, _} ->
		S12#{tls_common_name => PFtls_common_name};
	    _ -> S12
	  end,
    S14 = case {PMsg, NMsg} of
	    {_, #{tls_subject := NFtls_subject}} ->
		S13#{tls_subject => NFtls_subject};
	    {#{tls_subject := PFtls_subject}, _} ->
		S13#{tls_subject => PFtls_subject};
	    _ -> S13
	  end,
    S15 = case {PMsg, NMsg} of
	    {_, #{topic := NFtopic}} -> S14#{topic => NFtopic};
	    {#{topic := PFtopic}, _} -> S14#{topic => PFtopic};
	    _ -> S14
	  end,
    case {PMsg, NMsg} of
      {_, #{access := NFaccess}} -> S15#{access => NFaccess};
      {#{access := PFaccess}, _} -> S15#{access => PFaccess};
      _ -> S15
    end.

-compile({nowarn_unused_function,merge_msg_auth_response/3}).
merge_msg_auth_response(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{code := NFcode}} -> S1#{code => NFcode};
	   {#{code := PFcode}, _} -> S1#{code => PFcode};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{msg := NFmsg}} -> S2#{msg => NFmsg};
	   {#{msg := PFmsg}, _} -> S2#{msg => PFmsg};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{is_superuser := NFis_superuser}} ->
	       S3#{is_superuser => NFis_superuser};
	   {#{is_superuser := PFis_superuser}, _} ->
	       S3#{is_superuser => PFis_superuser};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{anonymous := NFanonymous}} ->
	       S4#{anonymous => NFanonymous};
	   {#{anonymous := PFanonymous}, _} ->
	       S4#{anonymous => PFanonymous};
	   _ -> S4
	 end,
    case {PMsg, NMsg} of
      {_, #{mountpoint := NFmountpoint}} ->
	  S5#{mountpoint => NFmountpoint};
      {#{mountpoint := PFmountpoint}, _} ->
	  S5#{mountpoint => PFmountpoint};
      _ -> S5
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      auth_request ->
	  v_msg_auth_request(Msg, [MsgName], TrUserData);
      auth_response ->
	  v_msg_auth_response(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_auth_request/3}).
-dialyzer({nowarn_function,v_msg_auth_request/3}).
v_msg_auth_request(#{} = M, Path, TrUserData) ->
    case M of
      #{client_id := F1} ->
	  v_type_string(F1, [client_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{username := F2} ->
	  v_type_string(F2, [username | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{password := F3} ->
	  v_type_string(F3, [password | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{protocol := F4} ->
	  v_type_string(F4, [protocol | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{peerhost := F5} ->
	  v_type_string(F5, [peerhost | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{sockport := F6} ->
	  v_type_int32(F6, [sockport | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{peercert := F7} ->
	  v_type_string(F7, [peercert | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{is_bridge := F8} ->
	  v_type_bool(F8, [is_bridge | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{is_superuser := F9} ->
	  v_type_bool(F9, [is_superuser | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{mountpoint := F10} ->
	  v_type_string(F10, [mountpoint | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{zone := F11} ->
	  v_type_string(F11, [zone | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tls_common_name := F12} ->
	  v_type_string(F12, [tls_common_name | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{tls_subject := F13} ->
	  v_type_string(F13, [tls_subject | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{topic := F14} ->
	  v_type_string(F14, [topic | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{access := F15} ->
	  v_type_string(F15, [access | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (client_id) -> ok;
		      (username) -> ok;
		      (password) -> ok;
		      (protocol) -> ok;
		      (peerhost) -> ok;
		      (sockport) -> ok;
		      (peercert) -> ok;
		      (is_bridge) -> ok;
		      (is_superuser) -> ok;
		      (mountpoint) -> ok;
		      (zone) -> ok;
		      (tls_common_name) -> ok;
		      (tls_subject) -> ok;
		      (topic) -> ok;
		      (access) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_auth_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   auth_request},
		  M, Path);
v_msg_auth_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, auth_request}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_response/3}).
-dialyzer({nowarn_function,v_msg_auth_response/3}).
v_msg_auth_response(#{} = M, Path, TrUserData) ->
    case M of
      #{code := F1} ->
	  v_type_int32(F1, [code | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{msg := F2} ->
	  v_type_string(F2, [msg | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{is_superuser := F3} ->
	  v_type_bool(F3, [is_superuser | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{anonymous := F4} ->
	  v_type_bool(F4, [anonymous | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{mountpoint := F5} ->
	  v_type_string(F5, [mountpoint | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
		      (msg) -> ok;
		      (is_superuser) -> ok;
		      (anonymous) -> ok;
		      (mountpoint) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_auth_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   auth_response},
		  M, Path);
v_msg_auth_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, auth_response}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, auth_request},
      [#{name => client_id, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => username, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => password, fnum => 3, rnum => 4,
	 type => string, occurrence => optional, opts => []},
       #{name => protocol, fnum => 4, rnum => 5,
	 type => string, occurrence => optional, opts => []},
       #{name => peerhost, fnum => 5, rnum => 6,
	 type => string, occurrence => optional, opts => []},
       #{name => sockport, fnum => 6, rnum => 7, type => int32,
	 occurrence => optional, opts => []},
       #{name => peercert, fnum => 7, rnum => 8,
	 type => string, occurrence => optional, opts => []},
       #{name => is_bridge, fnum => 8, rnum => 9, type => bool,
	 occurrence => optional, opts => []},
       #{name => is_superuser, fnum => 9, rnum => 10,
	 type => bool, occurrence => optional, opts => []},
       #{name => mountpoint, fnum => 10, rnum => 11,
	 type => string, occurrence => optional, opts => []},
       #{name => zone, fnum => 11, rnum => 12, type => string,
	 occurrence => optional, opts => []},
       #{name => tls_common_name, fnum => 12, rnum => 13,
	 type => string, occurrence => optional, opts => []},
       #{name => tls_subject, fnum => 13, rnum => 14,
	 type => string, occurrence => optional, opts => []},
       #{name => topic, fnum => 14, rnum => 15, type => string,
	 occurrence => optional, opts => []},
       #{name => access, fnum => 15, rnum => 16,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, auth_response},
      [#{name => code, fnum => 1, rnum => 2, type => int32,
	 occurrence => optional, opts => []},
       #{name => msg, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => is_superuser, fnum => 3, rnum => 4,
	 type => bool, occurrence => optional, opts => []},
       #{name => anonymous, fnum => 4, rnum => 5, type => bool,
	 occurrence => optional, opts => []},
       #{name => mountpoint, fnum => 6, rnum => 6,
	 type => string, occurrence => optional, opts => []}]}].


get_msg_names() -> [auth_request, auth_response].


get_group_names() -> [].


get_msg_or_group_names() ->
    [auth_request, auth_response].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(auth_request) ->
    [#{name => client_id, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => username, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => password, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []},
     #{name => protocol, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => peerhost, fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []},
     #{name => sockport, fnum => 6, rnum => 7, type => int32,
       occurrence => optional, opts => []},
     #{name => peercert, fnum => 7, rnum => 8,
       type => string, occurrence => optional, opts => []},
     #{name => is_bridge, fnum => 8, rnum => 9, type => bool,
       occurrence => optional, opts => []},
     #{name => is_superuser, fnum => 9, rnum => 10,
       type => bool, occurrence => optional, opts => []},
     #{name => mountpoint, fnum => 10, rnum => 11,
       type => string, occurrence => optional, opts => []},
     #{name => zone, fnum => 11, rnum => 12, type => string,
       occurrence => optional, opts => []},
     #{name => tls_common_name, fnum => 12, rnum => 13,
       type => string, occurrence => optional, opts => []},
     #{name => tls_subject, fnum => 13, rnum => 14,
       type => string, occurrence => optional, opts => []},
     #{name => topic, fnum => 14, rnum => 15, type => string,
       occurrence => optional, opts => []},
     #{name => access, fnum => 15, rnum => 16,
       type => string, occurrence => optional, opts => []}];
find_msg_def(auth_response) ->
    [#{name => code, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []},
     #{name => msg, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => is_superuser, fnum => 3, rnum => 4,
       type => bool, occurrence => optional, opts => []},
     #{name => anonymous, fnum => 4, rnum => 5, type => bool,
       occurrence => optional, opts => []},
     #{name => mountpoint, fnum => 6, rnum => 6,
       type => string, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['emqx_auth.Authentication'].


get_service_def('emqx_auth.Authentication') ->
    {{service, 'emqx_auth.Authentication'},
     [#{name => 'AuthUser', input => auth_request,
	output => auth_response, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'AuthACL', input => auth_request,
	output => auth_response, input_stream => false,
	output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('emqx_auth.Authentication') ->
    ['AuthUser', 'AuthACL'];
get_rpc_names(_) -> error.


find_rpc_def('emqx_auth.Authentication', RpcName) ->
    'find_rpc_def_emqx_auth.Authentication'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_emqx_auth.Authentication'('AuthUser') ->
    #{name => 'AuthUser', input => auth_request,
      output => auth_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx_auth.Authentication'('AuthACL') ->
    #{name => 'AuthACL', input => auth_request,
      output => auth_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx_auth.Authentication'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"emqx_auth.Authentication">>) ->
    'emqx_auth.Authentication';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('emqx_auth.Authentication') ->
    <<"emqx_auth.Authentication">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"emqx_auth.Authentication">>, <<"AuthUser">>) ->
    {'emqx_auth.Authentication', 'AuthUser'};
fqbins_to_service_and_rpc_name(<<"emqx_auth.Authentication">>, <<"AuthACL">>) ->
    {'emqx_auth.Authentication', 'AuthACL'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('emqx_auth.Authentication',
			       'AuthUser') ->
    {<<"emqx_auth.Authentication">>, <<"AuthUser">>};
service_and_rpc_name_to_fqbins('emqx_auth.Authentication',
			       'AuthACL') ->
    {<<"emqx_auth.Authentication">>, <<"AuthACL">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"emqx_auth.AuthRequest">>) -> auth_request;
fqbin_to_msg_name(<<"emqx_auth.AuthResponse">>) -> auth_response;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(auth_request) -> <<"emqx_auth.AuthRequest">>;
msg_name_to_fqbin(auth_response) -> <<"emqx_auth.AuthResponse">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> emqx_auth.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "auth.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["auth.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["auth"].


get_msg_containment("auth") ->
    [auth_request, auth_response];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("auth") -> emqx_auth;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("auth") ->
    ['emqx_auth.Authentication'];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("auth") ->
    [{'emqx_auth.Authentication', 'AuthUser'},
     {'emqx_auth.Authentication', 'AuthACL'}];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("auth") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"emqx_auth.AuthRequest">>) -> "auth";
get_proto_by_msg_name_as_fqbin(<<"emqx_auth.AuthResponse">>) -> "auth";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"emqx_auth.Authentication">>) -> "auth";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"emqx_auth">>) -> ["auth"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.3".

gpb_version_as_list() ->
    [4,7,3].
