%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.3
-module(auth_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type auth_request() ::
      #{username                => iodata(),        % = 1
        client_id               => iodata(),        % = 2
        ip_address              => iodata(),        % = 3
        protocol                => iodata(),        % = 4
        port                    => integer(),       % = 5, 32 bits
        tls_common_name         => iodata(),        % = 6
        tls_subject             => iodata()         % = 7
       }.

-type auth_response() ::
      #{code                    => integer(),       % = 1, 32 bits
        msg                     => iodata()         % = 2
       }.

-type acl_request() ::
      #{username                => iodata(),        % = 1
        client_id               => iodata(),        % = 2
        ip_address              => iodata(),        % = 3
        protocol                => iodata(),        % = 4
        mount_point             => iodata(),        % = 5
        topic                   => iodata()         % = 6
       }.

-type acl_response() ::
      #{code                    => integer(),       % = 1, 32 bits
        msg                     => iodata()         % = 2
       }.

-export_type(['auth_request'/0, 'auth_response'/0, 'acl_request'/0, 'acl_response'/0]).

-spec encode_msg(auth_request() | auth_response() | acl_request() | acl_response(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(auth_request() | auth_response() | acl_request() | acl_response(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      auth_request ->
	  encode_msg_auth_request(id(Msg, TrUserData),
				  TrUserData);
      auth_response ->
	  encode_msg_auth_response(id(Msg, TrUserData),
				   TrUserData);
      acl_request ->
	  encode_msg_acl_request(id(Msg, TrUserData), TrUserData);
      acl_response ->
	  encode_msg_acl_response(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_auth_request(Msg, TrUserData) ->
    encode_msg_auth_request(Msg, <<>>, TrUserData).


encode_msg_auth_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{username := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{client_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{ip_address := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case is_empty_string(TrF3) of
		   true -> B2;
		   false ->
		       e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{protocol := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 case is_empty_string(TrF4) of
		   true -> B3;
		   false ->
		       e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{port := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= 0 -> B4;
		    true ->
			e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{tls_common_name := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 case is_empty_string(TrF6) of
		   true -> B5;
		   false ->
		       e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    case M of
      #{tls_subject := F7} ->
	  begin
	    TrF7 = id(F7, TrUserData),
	    case is_empty_string(TrF7) of
	      true -> B6;
	      false ->
		  e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
	    end
	  end;
      _ -> B6
    end.

encode_msg_auth_response(Msg, TrUserData) ->
    encode_msg_auth_response(Msg, <<>>, TrUserData).


encode_msg_auth_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{code := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{msg := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_acl_request(Msg, TrUserData) ->
    encode_msg_acl_request(Msg, <<>>, TrUserData).


encode_msg_acl_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{username := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{client_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{ip_address := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case is_empty_string(TrF3) of
		   true -> B2;
		   false ->
		       e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{protocol := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 case is_empty_string(TrF4) of
		   true -> B3;
		   false ->
		       e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{mount_point := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 case is_empty_string(TrF5) of
		   true -> B4;
		   false ->
		       e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    case M of
      #{topic := F6} ->
	  begin
	    TrF6 = id(F6, TrUserData),
	    case is_empty_string(TrF6) of
	      true -> B5;
	      false ->
		  e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
	    end
	  end;
      _ -> B5
    end.

encode_msg_acl_response(Msg, TrUserData) ->
    encode_msg_acl_response(Msg, <<>>, TrUserData).


encode_msg_acl_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{code := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{msg := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(auth_request, Bin, TrUserData) ->
    id(decode_msg_auth_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(auth_response, Bin, TrUserData) ->
    id(decode_msg_auth_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(acl_request, Bin, TrUserData) ->
    id(decode_msg_acl_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(acl_response, Bin, TrUserData) ->
    id(decode_msg_acl_response(Bin, TrUserData),
       TrUserData).



decode_msg_auth_request(Bin, TrUserData) ->
    dfp_read_field_def_auth_request(Bin, 0, 0,
				    id(<<>>, TrUserData), id(<<>>, TrUserData),
				    id(<<>>, TrUserData), id(<<>>, TrUserData),
				    id(0, TrUserData), id(<<>>, TrUserData),
				    id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_auth_request(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_auth_request_username(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_auth_request(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_auth_request_client_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_auth_request(<<26, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_auth_request_ip_address(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData);
dfp_read_field_def_auth_request(<<34, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_auth_request_protocol(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_auth_request(<<40, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_auth_request_port(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_auth_request(<<50, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_auth_request_tls_common_name(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 TrUserData);
dfp_read_field_def_auth_request(<<58, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_auth_request_tls_subject(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData);
dfp_read_field_def_auth_request(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #{username => F@_1, client_id => F@_2,
      ip_address => F@_3, protocol => F@_4, port => F@_5,
      tls_common_name => F@_6, tls_subject => F@_7};
dfp_read_field_def_auth_request(Other, Z1, Z2, F@_1,
				F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    dg_read_field_def_auth_request(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				   TrUserData).

dg_read_field_def_auth_request(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_auth_request(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, TrUserData);
dg_read_field_def_auth_request(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_auth_request_username(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7,
					TrUserData);
      18 ->
	  d_field_auth_request_client_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7,
					 TrUserData);
      26 ->
	  d_field_auth_request_ip_address(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7,
					  TrUserData);
      34 ->
	  d_field_auth_request_protocol(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7,
					TrUserData);
      40 ->
	  d_field_auth_request_port(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      50 ->
	  d_field_auth_request_tls_common_name(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, TrUserData);
      58 ->
	  d_field_auth_request_tls_subject(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_auth_request(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_auth_request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_auth_request(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, TrUserData);
	    3 ->
		skip_group_auth_request(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7,
					TrUserData);
	    5 ->
		skip_32_auth_request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_auth_request(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #{username => F@_1, client_id => F@_2,
      ip_address => F@_3, protocol => F@_4, port => F@_5,
      tls_common_name => F@_6, tls_subject => F@_7}.

d_field_auth_request_username(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData)
    when N < 57 ->
    d_field_auth_request_username(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, TrUserData);
d_field_auth_request_username(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData).

d_field_auth_request_client_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData)
    when N < 57 ->
    d_field_auth_request_client_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, TrUserData);
d_field_auth_request_client_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData).

d_field_auth_request_ip_address(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData)
    when N < 57 ->
    d_field_auth_request_ip_address(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, TrUserData);
d_field_auth_request_ip_address(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, F@_4, F@_5, F@_6, F@_7,
				    TrUserData).

d_field_auth_request_protocol(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData)
    when N < 57 ->
    d_field_auth_request_protocol(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, TrUserData);
d_field_auth_request_protocol(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, NewFValue, F@_5, F@_6, F@_7,
				    TrUserData).

d_field_auth_request_port(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_auth_request_port(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_auth_request_port(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, NewFValue, F@_6, F@_7,
				    TrUserData).

d_field_auth_request_tls_common_name(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, TrUserData)
    when N < 57 ->
    d_field_auth_request_tls_common_name(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, TrUserData);
d_field_auth_request_tls_common_name(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				     F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, NewFValue, F@_7,
				    TrUserData).

d_field_auth_request_tls_subject(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData)
    when N < 57 ->
    d_field_auth_request_tls_subject(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, TrUserData);
d_field_auth_request_tls_subject(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
				 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_request(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, NewFValue,
				    TrUserData).

skip_varint_auth_request(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    skip_varint_auth_request(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_auth_request(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    dfp_read_field_def_auth_request(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData).

skip_length_delimited_auth_request(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_auth_request(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_auth_request(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_request(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_auth_request(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_request(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_auth_request(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_auth_request(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData).

skip_64_auth_request(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_auth_request(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData).

decode_msg_auth_response(Bin, TrUserData) ->
    dfp_read_field_def_auth_response(Bin, 0, 0,
				     id(0, TrUserData), id(<<>>, TrUserData),
				     TrUserData).

dfp_read_field_def_auth_response(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, TrUserData) ->
    d_field_auth_response_code(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_auth_response(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_auth_response_msg(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_auth_response(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #{code => F@_1, msg => F@_2};
dfp_read_field_def_auth_response(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_auth_response(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_auth_response(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_auth_response(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_auth_response(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_auth_response_code(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_auth_response_msg(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_auth_response(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_auth_response(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_auth_response(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_auth_response(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_auth_response(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_auth_response(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #{code => F@_1, msg => F@_2}.

d_field_auth_response_code(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_auth_response_code(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_auth_response_code(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_auth_response(RestF, 0, 0, NewFValue,
				     F@_2, TrUserData).

d_field_auth_response_msg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_auth_response_msg(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_auth_response_msg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_auth_response(RestF, 0, 0, F@_1,
				     NewFValue, TrUserData).

skip_varint_auth_response(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_auth_response(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_auth_response(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_auth_response(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_auth_response(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_auth_response(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_auth_response(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_response(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_auth_response(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_response(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_auth_response(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_auth_response(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_auth_response(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_auth_response(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

decode_msg_acl_request(Bin, TrUserData) ->
    dfp_read_field_def_acl_request(Bin, 0, 0,
				   id(<<>>, TrUserData), id(<<>>, TrUserData),
				   id(<<>>, TrUserData), id(<<>>, TrUserData),
				   id(<<>>, TrUserData), id(<<>>, TrUserData),
				   TrUserData).

dfp_read_field_def_acl_request(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    d_field_acl_request_username(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_acl_request(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    d_field_acl_request_client_id(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_acl_request(<<26, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    d_field_acl_request_ip_address(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_acl_request(<<34, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    d_field_acl_request_protocol(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_acl_request(<<42, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    d_field_acl_request_mount_point(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_acl_request(<<50, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    d_field_acl_request_topic(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_acl_request(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, _) ->
    #{username => F@_1, client_id => F@_2,
      ip_address => F@_3, protocol => F@_4,
      mount_point => F@_5, topic => F@_6};
dfp_read_field_def_acl_request(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_acl_request(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_acl_request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_acl_request(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, TrUserData);
dg_read_field_def_acl_request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_acl_request_username(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
      18 ->
	  d_field_acl_request_client_id(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, TrUserData);
      26 ->
	  d_field_acl_request_ip_address(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, TrUserData);
      34 ->
	  d_field_acl_request_protocol(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
      42 ->
	  d_field_acl_request_mount_point(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, TrUserData);
      50 ->
	  d_field_acl_request_topic(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_acl_request(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_acl_request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_acl_request(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  TrUserData);
	    3 ->
		skip_group_acl_request(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_acl_request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_acl_request(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, _) ->
    #{username => F@_1, client_id => F@_2,
      ip_address => F@_3, protocol => F@_4,
      mount_point => F@_5, topic => F@_6}.

d_field_acl_request_username(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 57 ->
    d_field_acl_request_username(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
d_field_acl_request_username(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_acl_request(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_acl_request_client_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData)
    when N < 57 ->
    d_field_acl_request_client_id(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, TrUserData);
d_field_acl_request_client_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_acl_request(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, F@_5, F@_6,
				   TrUserData).

d_field_acl_request_ip_address(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData)
    when N < 57 ->
    d_field_acl_request_ip_address(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, TrUserData);
d_field_acl_request_ip_address(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
			       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_acl_request(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_acl_request_protocol(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 57 ->
    d_field_acl_request_protocol(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
d_field_acl_request_protocol(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_acl_request(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_acl_request_mount_point(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData)
    when N < 57 ->
    d_field_acl_request_mount_point(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, TrUserData);
d_field_acl_request_mount_point(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_acl_request(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_acl_request_topic(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_acl_request_topic(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_acl_request_topic(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_acl_request(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_acl_request(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_acl_request(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, TrUserData);
skip_varint_acl_request(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_acl_request(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_acl_request(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData)
    when N < 57 ->
    skip_length_delimited_acl_request(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, TrUserData);
skip_length_delimited_acl_request(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_acl_request(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_acl_request(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_acl_request(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_acl_request(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_acl_request(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_acl_request(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_acl_request(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_acl_response(Bin, TrUserData) ->
    dfp_read_field_def_acl_response(Bin, 0, 0,
				    id(0, TrUserData), id(<<>>, TrUserData),
				    TrUserData).

dfp_read_field_def_acl_response(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_acl_response_code(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_acl_response(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_acl_response_msg(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_acl_response(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #{code => F@_1, msg => F@_2};
dfp_read_field_def_acl_response(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_acl_response(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_acl_response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_acl_response(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_acl_response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_acl_response_code(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_acl_response_msg(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_acl_response(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_acl_response(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_acl_response(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_acl_response(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_acl_response(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_acl_response(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #{code => F@_1, msg => F@_2}.

d_field_acl_response_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_acl_response_code(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_acl_response_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_acl_response(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_acl_response_msg(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_acl_response_msg(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_acl_response_msg(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_acl_response(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_acl_response(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_acl_response(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_acl_response(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_acl_response(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_acl_response(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_acl_response(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_acl_response(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_acl_response(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_acl_response(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_acl_response(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_acl_response(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_acl_response(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_acl_response(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_acl_response(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      auth_request ->
	  merge_msg_auth_request(Prev, New, TrUserData);
      auth_response ->
	  merge_msg_auth_response(Prev, New, TrUserData);
      acl_request ->
	  merge_msg_acl_request(Prev, New, TrUserData);
      acl_response ->
	  merge_msg_acl_response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_auth_request/3}).
merge_msg_auth_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{username := NFusername}} ->
	       S1#{username => NFusername};
	   {#{username := PFusername}, _} ->
	       S1#{username => PFusername};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{client_id := NFclient_id}} ->
	       S2#{client_id => NFclient_id};
	   {#{client_id := PFclient_id}, _} ->
	       S2#{client_id => PFclient_id};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{ip_address := NFip_address}} ->
	       S3#{ip_address => NFip_address};
	   {#{ip_address := PFip_address}, _} ->
	       S3#{ip_address => PFip_address};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{protocol := NFprotocol}} ->
	       S4#{protocol => NFprotocol};
	   {#{protocol := PFprotocol}, _} ->
	       S4#{protocol => PFprotocol};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{port := NFport}} -> S5#{port => NFport};
	   {#{port := PFport}, _} -> S5#{port => PFport};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{tls_common_name := NFtls_common_name}} ->
	       S6#{tls_common_name => NFtls_common_name};
	   {#{tls_common_name := PFtls_common_name}, _} ->
	       S6#{tls_common_name => PFtls_common_name};
	   _ -> S6
	 end,
    case {PMsg, NMsg} of
      {_, #{tls_subject := NFtls_subject}} ->
	  S7#{tls_subject => NFtls_subject};
      {#{tls_subject := PFtls_subject}, _} ->
	  S7#{tls_subject => PFtls_subject};
      _ -> S7
    end.

-compile({nowarn_unused_function,merge_msg_auth_response/3}).
merge_msg_auth_response(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{code := NFcode}} -> S1#{code => NFcode};
	   {#{code := PFcode}, _} -> S1#{code => PFcode};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{msg := NFmsg}} -> S2#{msg => NFmsg};
      {#{msg := PFmsg}, _} -> S2#{msg => PFmsg};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_acl_request/3}).
merge_msg_acl_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{username := NFusername}} ->
	       S1#{username => NFusername};
	   {#{username := PFusername}, _} ->
	       S1#{username => PFusername};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{client_id := NFclient_id}} ->
	       S2#{client_id => NFclient_id};
	   {#{client_id := PFclient_id}, _} ->
	       S2#{client_id => PFclient_id};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{ip_address := NFip_address}} ->
	       S3#{ip_address => NFip_address};
	   {#{ip_address := PFip_address}, _} ->
	       S3#{ip_address => PFip_address};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{protocol := NFprotocol}} ->
	       S4#{protocol => NFprotocol};
	   {#{protocol := PFprotocol}, _} ->
	       S4#{protocol => PFprotocol};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{mount_point := NFmount_point}} ->
	       S5#{mount_point => NFmount_point};
	   {#{mount_point := PFmount_point}, _} ->
	       S5#{mount_point => PFmount_point};
	   _ -> S5
	 end,
    case {PMsg, NMsg} of
      {_, #{topic := NFtopic}} -> S6#{topic => NFtopic};
      {#{topic := PFtopic}, _} -> S6#{topic => PFtopic};
      _ -> S6
    end.

-compile({nowarn_unused_function,merge_msg_acl_response/3}).
merge_msg_acl_response(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{code := NFcode}} -> S1#{code => NFcode};
	   {#{code := PFcode}, _} -> S1#{code => PFcode};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{msg := NFmsg}} -> S2#{msg => NFmsg};
      {#{msg := PFmsg}, _} -> S2#{msg => PFmsg};
      _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      auth_request ->
	  v_msg_auth_request(Msg, [MsgName], TrUserData);
      auth_response ->
	  v_msg_auth_response(Msg, [MsgName], TrUserData);
      acl_request ->
	  v_msg_acl_request(Msg, [MsgName], TrUserData);
      acl_response ->
	  v_msg_acl_response(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_auth_request/3}).
-dialyzer({nowarn_function,v_msg_auth_request/3}).
v_msg_auth_request(#{} = M, Path, TrUserData) ->
    case M of
      #{username := F1} ->
	  v_type_string(F1, [username | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{client_id := F2} ->
	  v_type_string(F2, [client_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{ip_address := F3} ->
	  v_type_string(F3, [ip_address | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{protocol := F4} ->
	  v_type_string(F4, [protocol | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{port := F5} ->
	  v_type_int32(F5, [port | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tls_common_name := F6} ->
	  v_type_string(F6, [tls_common_name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tls_subject := F7} ->
	  v_type_string(F7, [tls_subject | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (username) -> ok;
		      (client_id) -> ok;
		      (ip_address) -> ok;
		      (protocol) -> ok;
		      (port) -> ok;
		      (tls_common_name) -> ok;
		      (tls_subject) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_auth_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   auth_request},
		  M, Path);
v_msg_auth_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, auth_request}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_response/3}).
-dialyzer({nowarn_function,v_msg_auth_response/3}).
v_msg_auth_response(#{} = M, Path, TrUserData) ->
    case M of
      #{code := F1} ->
	  v_type_int32(F1, [code | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{msg := F2} ->
	  v_type_string(F2, [msg | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
		      (msg) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_auth_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   auth_response},
		  M, Path);
v_msg_auth_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, auth_response}, X, Path).

-compile({nowarn_unused_function,v_msg_acl_request/3}).
-dialyzer({nowarn_function,v_msg_acl_request/3}).
v_msg_acl_request(#{} = M, Path, TrUserData) ->
    case M of
      #{username := F1} ->
	  v_type_string(F1, [username | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{client_id := F2} ->
	  v_type_string(F2, [client_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{ip_address := F3} ->
	  v_type_string(F3, [ip_address | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{protocol := F4} ->
	  v_type_string(F4, [protocol | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{mount_point := F5} ->
	  v_type_string(F5, [mount_point | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{topic := F6} ->
	  v_type_string(F6, [topic | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (username) -> ok;
		      (client_id) -> ok;
		      (ip_address) -> ok;
		      (protocol) -> ok;
		      (mount_point) -> ok;
		      (topic) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_acl_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   acl_request},
		  M, Path);
v_msg_acl_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, acl_request}, X, Path).

-compile({nowarn_unused_function,v_msg_acl_response/3}).
-dialyzer({nowarn_function,v_msg_acl_response/3}).
v_msg_acl_response(#{} = M, Path, TrUserData) ->
    case M of
      #{code := F1} ->
	  v_type_int32(F1, [code | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{msg := F2} ->
	  v_type_string(F2, [msg | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
		      (msg) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_acl_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   acl_response},
		  M, Path);
v_msg_acl_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, acl_response}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, auth_request},
      [#{name => username, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => client_id, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => ip_address, fnum => 3, rnum => 4,
	 type => string, occurrence => optional, opts => []},
       #{name => protocol, fnum => 4, rnum => 5,
	 type => string, occurrence => optional, opts => []},
       #{name => port, fnum => 5, rnum => 6, type => int32,
	 occurrence => optional, opts => []},
       #{name => tls_common_name, fnum => 6, rnum => 7,
	 type => string, occurrence => optional, opts => []},
       #{name => tls_subject, fnum => 7, rnum => 8,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, auth_response},
      [#{name => code, fnum => 1, rnum => 2, type => int32,
	 occurrence => optional, opts => []},
       #{name => msg, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, acl_request},
      [#{name => username, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => client_id, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => ip_address, fnum => 3, rnum => 4,
	 type => string, occurrence => optional, opts => []},
       #{name => protocol, fnum => 4, rnum => 5,
	 type => string, occurrence => optional, opts => []},
       #{name => mount_point, fnum => 5, rnum => 6,
	 type => string, occurrence => optional, opts => []},
       #{name => topic, fnum => 6, rnum => 7, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, acl_response},
      [#{name => code, fnum => 1, rnum => 2, type => int32,
	 occurrence => optional, opts => []},
       #{name => msg, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
    [auth_request, auth_response, acl_request,
     acl_response].


get_group_names() -> [].


get_msg_or_group_names() ->
    [auth_request, auth_response, acl_request,
     acl_response].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(auth_request) ->
    [#{name => username, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => client_id, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => ip_address, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []},
     #{name => protocol, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => port, fnum => 5, rnum => 6, type => int32,
       occurrence => optional, opts => []},
     #{name => tls_common_name, fnum => 6, rnum => 7,
       type => string, occurrence => optional, opts => []},
     #{name => tls_subject, fnum => 7, rnum => 8,
       type => string, occurrence => optional, opts => []}];
find_msg_def(auth_response) ->
    [#{name => code, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []},
     #{name => msg, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(acl_request) ->
    [#{name => username, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => client_id, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => ip_address, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []},
     #{name => protocol, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => mount_point, fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []},
     #{name => topic, fnum => 6, rnum => 7, type => string,
       occurrence => optional, opts => []}];
find_msg_def(acl_response) ->
    [#{name => code, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []},
     #{name => msg, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['emqx_auth.Service'].


get_service_def('emqx_auth.Service') ->
    {{service, 'emqx_auth.Service'},
     [#{name => 'AuthUser', input => auth_request,
	output => auth_response, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'IsSuper', input => auth_request,
	output => auth_response, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'AuthACL', input => acl_request,
	output => acl_response, input_stream => false,
	output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('emqx_auth.Service') ->
    ['AuthUser', 'IsSuper', 'AuthACL'];
get_rpc_names(_) -> error.


find_rpc_def('emqx_auth.Service', RpcName) ->
    'find_rpc_def_emqx_auth.Service'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_emqx_auth.Service'('AuthUser') ->
    #{name => 'AuthUser', input => auth_request,
      output => auth_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx_auth.Service'('IsSuper') ->
    #{name => 'IsSuper', input => auth_request,
      output => auth_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx_auth.Service'('AuthACL') ->
    #{name => 'AuthACL', input => acl_request,
      output => acl_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx_auth.Service'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"emqx_auth.Service">>) -> 'emqx_auth.Service';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('emqx_auth.Service') -> <<"emqx_auth.Service">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"emqx_auth.Service">>, <<"AuthUser">>) ->
    {'emqx_auth.Service', 'AuthUser'};
fqbins_to_service_and_rpc_name(<<"emqx_auth.Service">>, <<"IsSuper">>) ->
    {'emqx_auth.Service', 'IsSuper'};
fqbins_to_service_and_rpc_name(<<"emqx_auth.Service">>, <<"AuthACL">>) ->
    {'emqx_auth.Service', 'AuthACL'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('emqx_auth.Service',
			       'AuthUser') ->
    {<<"emqx_auth.Service">>, <<"AuthUser">>};
service_and_rpc_name_to_fqbins('emqx_auth.Service',
			       'IsSuper') ->
    {<<"emqx_auth.Service">>, <<"IsSuper">>};
service_and_rpc_name_to_fqbins('emqx_auth.Service',
			       'AuthACL') ->
    {<<"emqx_auth.Service">>, <<"AuthACL">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"emqx_auth.AuthRequest">>) -> auth_request;
fqbin_to_msg_name(<<"emqx_auth.AuthResponse">>) -> auth_response;
fqbin_to_msg_name(<<"emqx_auth.ACLRequest">>) -> acl_request;
fqbin_to_msg_name(<<"emqx_auth.ACLResponse">>) -> acl_response;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(auth_request) -> <<"emqx_auth.AuthRequest">>;
msg_name_to_fqbin(auth_response) -> <<"emqx_auth.AuthResponse">>;
msg_name_to_fqbin(acl_request) -> <<"emqx_auth.ACLRequest">>;
msg_name_to_fqbin(acl_response) -> <<"emqx_auth.ACLResponse">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> emqx_auth.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "auth.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["auth.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["auth"].


get_msg_containment("auth") ->
    [acl_request, acl_response, auth_request,
     auth_response];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("auth") -> emqx_auth;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("auth") ->
    ['emqx_auth.Service'];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("auth") ->
    [{'emqx_auth.Service', 'AuthUser'},
     {'emqx_auth.Service', 'IsSuper'},
     {'emqx_auth.Service', 'AuthACL'}];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("auth") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"emqx_auth.AuthRequest">>) -> "auth";
get_proto_by_msg_name_as_fqbin(<<"emqx_auth.ACLRequest">>) -> "auth";
get_proto_by_msg_name_as_fqbin(<<"emqx_auth.AuthResponse">>) -> "auth";
get_proto_by_msg_name_as_fqbin(<<"emqx_auth.ACLResponse">>) -> "auth";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"emqx_auth.Service">>) -> "auth";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"emqx_auth">>) -> ["auth"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.3".

gpb_version_as_list() ->
    [4,7,3].
